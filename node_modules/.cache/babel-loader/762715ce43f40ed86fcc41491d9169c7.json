{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"E:\\\\Estudo\\\\react\\\\udemy8projetos\\\\gerenciador-tarefas-api-cliente\\\\src\\\\listar\\\\concluir-tarefa.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Modal, Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faClipboardCheck } from '@fortawesome/free-solid-svg-icons';\n\nfunction ConcluirTarefa(props) {\n  _s();\n\n  const API_URL_REMOVER_TAREFAS = 'http://localhost:3001/gerenciador-tarefas/';\n  const [exibirModal, setExibirModal] = useState(false);\n  const [exibirModalErro, setExibirModalErro] = useState(false);\n\n  function handleAbrirModal(event) {\n    // para evitar que abra navegação ou atualize a tela\n    event.preventDefault();\n    setExibirModal(true);\n  }\n\n  function handleFecharModalErro() {\n    setExibirModalErro(false);\n  }\n\n  function handleFecharModal() {\n    setExibirModal(false);\n  }\n\n  function handleConcluirTarefa(event) {\n    event.preventDefault();\n    const tarefasDb = localStorage['tarefas'];\n    let tarefas = tarefasDb ? JSON.parse(tarefasDb) : [];\n    tarefas = tarefas.map(tarefa => {\n      //iterar todo o array salvo no localstoriga\n      if (tarefa.id === props.tarefa.id) {\n        tarefa.concluida = true;\n      }\n\n      return tarefa;\n    });\n    localStorage['tarefas'] = JSON.stringify(tarefas);\n    setExibirModal(false);\n    props.recarregarTarefas(true);\n  }\n  /**\r\n   * vamos usar o modal, então precisamos controlar sua visibilidade\r\n  */\n\n\n  return (\n    /*#__PURE__*/\n    //um elemento para encapsular -> elemento neutro\n    _jsxDEV(\"span\", {\n      className: props.className,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        className: \"btn-sm\",\n        onClick: handleAbrirModal,\n        \"data-testid\": \"btn-abrir-modal\",\n        children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faClipboardCheck\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        show: exibirModal,\n        onHide: handleFecharModal,\n        \"data-testid\": \"modal\",\n        children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n          closeButton: true,\n          children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n            children: \"Concluir tarefa\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n          children: [\"Deseja realmente concluir a seguinte tarefa?\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: props.tarefa.nome\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            onClick: handleConcluirTarefa,\n            \"data-testid\": \"btn-concluir\",\n            children: \"Sim\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"light\",\n            onClick: handleFecharModal,\n            \"data-testid\": \"btn-fechar-modal\",\n            children: \"N\\xE3o\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        show: exibirModalErro,\n        onHide: handleFecharModalErro,\n        \"data-testid\": \"modal\",\n        children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n          closeButton: true,\n          children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n            children: \"Erro \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n          children: \"Erro ao excluir tarefa, tente novamente em instantes.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"warning\",\n            onClick: handleFecharModalErro,\n            children: \"Fechar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)\n  );\n}\n\n_s(ConcluirTarefa, \"xN0Q0LkpcAwodNreBreSz4JyDhQ=\");\n\n_c = ConcluirTarefa;\nConcluirTarefa.propTypes = {\n  tarefa: PropTypes.object.isRequired,\n  recarregarTarefas: PropTypes.func.isRequired,\n  //função obrigatório\n  className: PropTypes.string //se  o botão vai ficar escondido ou não\n\n};\nexport default ConcluirTarefa;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConcluirTarefa\");","map":{"version":3,"sources":["E:/Estudo/react/udemy8projetos/gerenciador-tarefas-api-cliente/src/listar/concluir-tarefa.js"],"names":["React","useState","PropTypes","Modal","Button","FontAwesomeIcon","faClipboardCheck","ConcluirTarefa","props","API_URL_REMOVER_TAREFAS","exibirModal","setExibirModal","exibirModalErro","setExibirModalErro","handleAbrirModal","event","preventDefault","handleFecharModalErro","handleFecharModal","handleConcluirTarefa","tarefasDb","localStorage","tarefas","JSON","parse","map","tarefa","id","concluida","stringify","recarregarTarefas","className","nome","propTypes","object","isRequired","func","string"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Modal, Button }  from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faClipboardCheck } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nfunction ConcluirTarefa(props){\r\n\r\n    const API_URL_REMOVER_TAREFAS = 'http://localhost:3001/gerenciador-tarefas/';\r\n\r\n\r\n    const [exibirModal, setExibirModal] = useState(false);\r\n    const [exibirModalErro, setExibirModalErro] = useState(false);\r\n\r\n\r\n    function handleAbrirModal(event){\r\n        // para evitar que abra navegação ou atualize a tela\r\n        event.preventDefault();\r\n        setExibirModal(true);\r\n         \r\n    }\r\n\r\n    function handleFecharModalErro(){\r\n        setExibirModalErro(false);\r\n    }\r\n\r\n    \r\n\r\n\r\n    function handleFecharModal(){\r\n        setExibirModal(false);\r\n    }\r\n\r\n    function handleConcluirTarefa(event){\r\n        event.preventDefault();\r\n        const tarefasDb = localStorage['tarefas'];\r\n        let tarefas = tarefasDb ? JSON.parse(tarefasDb) : [];\r\n        tarefas = tarefas.map(tarefa => {\r\n            //iterar todo o array salvo no localstoriga\r\n            if(tarefa.id ===props.tarefa.id){\r\n                tarefa.concluida = true;\r\n            }\r\n            return tarefa;\r\n        });\r\n        localStorage['tarefas'] = JSON.stringify(tarefas);\r\n        setExibirModal(false);\r\n        props.recarregarTarefas(true);\r\n    }\r\n\r\n    /**\r\n     * vamos usar o modal, então precisamos controlar sua visibilidade\r\n    */\r\n    return(\r\n        //um elemento para encapsular -> elemento neutro\r\n        <span className={props.className}>\r\n            <Button className=\"btn-sm\" onClick={handleAbrirModal} data-testid=\"btn-abrir-modal\" >\r\n                <FontAwesomeIcon icon={faClipboardCheck} />\r\n            </Button>\r\n            <Modal show={exibirModal} onHide={handleFecharModal} data-testid=\"modal\">\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Concluir tarefa</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    Deseja realmente concluir a seguinte tarefa?\r\n                    <br/>\r\n                    <strong>{props.tarefa.nome}</strong>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"primary\" onClick={handleConcluirTarefa} data-testid=\"btn-concluir\">\r\n                        Sim\r\n                    </Button>\r\n                    <Button variant=\"light\" onClick={handleFecharModal} data-testid=\"btn-fechar-modal\">\r\n                        Não\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n\r\n            <Modal show={exibirModalErro} onHide={handleFecharModalErro} data-testid=\"modal\">\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Erro </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    Erro ao excluir tarefa, tente novamente em instantes.\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"warning\" onClick={handleFecharModalErro}>\r\n                        Fechar\r\n                    </Button>\r\n\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n        </span>\r\n    );\r\n\r\n}\r\n\r\n\r\nConcluirTarefa.propTypes= {\r\n    tarefa: PropTypes.object.isRequired,\r\n    recarregarTarefas: PropTypes.func.isRequired, //função obrigatório\r\n    className: PropTypes.string //se  o botão vai ficar escondido ou não\r\n\r\n}\r\n\r\nexport default ConcluirTarefa;"]},"metadata":{},"sourceType":"module"}