{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"E:\\\\Estudo\\\\react\\\\udemy8projetos\\\\gerenciador-tarefas-api-cliente\\\\src\\\\atualizar\\\\atualizar-tarefa.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Form, Jumbotron, Modal } from 'react-bootstrap';\nimport { navigate, A } from 'hookrouter';\n\nfunction AtualizarTarefa(props) {\n  _s();\n\n  const [exibirModal, setExibirModal] = useState(false);\n  const [formValidado, setFormValidado] = useState(false);\n  const [tarefa, setTarefa] = useState('');\n  const [carregarTarefa, setCarregarTarefa] = useState(true);\n  const [exibirModalErro, setExibirModalErro] = useState(false);\n  useEffect(() => {\n    //p limitar uma unica vez, vamos colocar o if\n    if (carregarTarefa) {\n      const tarefasDb = localStorage['tarefas'];\n      const tarefas = tarefasDb ? JSON.parse(tarefasDb) : [];\n      const tarefa = tarefas.filter(t => t.id === parseInt(props.id))[0];\n      setTarefa(tarefa.nome);\n      setCarregarTarefa(false);\n    }\n  }, [carregarTarefa, props]);\n\n  function voltar(event) {\n    event.preventDefault();\n    navigate('/');\n  }\n\n  function handleFecharModal() {\n    navigate('/');\n  }\n\n  function atualizar2(event) {\n    event.preventDefault();\n    setFormValidado(true);\n\n    if (event.currentTarget.checkValidity() === true) {\n      //obter as tarefas\n      const tarefasDb = localStorage['tarefas'];\n      let tarefas = tarefasDb ? JSON.parse(tarefasDb) : []; //persistir a tarefa atualziada\n\n      tarefas = tarefas.map(tarefaObj => {\n        if (tarefaObj.id === parseInt(props.id)) {\n          tarefaObj.nome = tarefa;\n        }\n\n        return tarefaObj;\n      });\n      localStorage['tarefas'] = JSON.stringify(tarefas);\n      setExibirModal(true);\n    }\n  }\n\n  function atualizar(event) {\n    event.preventDefault();\n    setFormValidado(true);\n\n    if (event.currentTarget.checkValidity() === true) {\n      //obter as tarefas\n      const tarefasDb = localStorage['tarefas'];\n      let tarefas = tarefasDb ? JSON.parse(tarefasDb) : []; //persistir a tarefa atualziada\n\n      tarefas = tarefas.map(tarefaObj => {\n        if (tarefaObj.id === parseInt(props.id)) {\n          tarefaObj.nome = tarefa;\n        }\n\n        return tarefaObj;\n      });\n      localStorage['tarefas'] = JSON.stringify(tarefas);\n      setExibirModal(true);\n    }\n  }\n\n  function handleTxtTarefa(event) {\n    setTarefa(event.target.value); //o valor do txt\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-center\",\n      children: \"Atualizar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Jumbotron, {\n      children: [/*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: atualizar,\n        noValidate: true,\n        validated: formValidado,\n        children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Tarefa\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            placeholder: \"Digite a tarefa\",\n            minLength: \"5\",\n            maxLength: \"100\",\n            required: true,\n            \"data-testid\": \"txt-tarefa\",\n            value: tarefa,\n            onChange: handleTxtTarefa\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n            type: \"invalid\",\n            children: \"A tarefa deve conter ao menos 5 caracteres\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          className: \"text-center\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"success\",\n            type: \"submit\",\n            \"data-testid\": \"btn-atualizar\",\n            children: \"Atualizar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 25\n          }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(A, {\n            href: \"/\",\n            className: \"btn btn-light\",\n            onClick: voltar,\n            children: \"Voltar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        show: exibirModal,\n        onHide: handleFecharModal,\n        \"data-testid\": \"modal\",\n        children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n          closeButton: true,\n          children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n            children: \"Sucesso \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n          children: \"Tarefa atualizado com sucesso!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"success\",\n            onClick: handleFecharModal,\n            children: \"Continuar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        show: exibirModalErro,\n        onHide: handleFecharModalErro,\n        \"data-testid\": \"modal\",\n        children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n          closeButton: true,\n          children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n            children: \"Erro \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n          children: \"Erro ao atualizar tarefa, tente novamente em instantes.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"warning\",\n            onClick: handleFecharModalErro,\n            children: \"Fechar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AtualizarTarefa, \"4qoAdn4j6VxIAWnlErpAE+CxKO8=\");\n\n_c = AtualizarTarefa;\nAtualizarTarefa.propTypes = {\n  id: PropTypes.number.isRequired\n};\nexport default AtualizarTarefa;\n\nvar _c;\n\n$RefreshReg$(_c, \"AtualizarTarefa\");","map":{"version":3,"sources":["E:/Estudo/react/udemy8projetos/gerenciador-tarefas-api-cliente/src/atualizar/atualizar-tarefa.js"],"names":["React","useState","useEffect","PropTypes","Button","Form","Jumbotron","Modal","navigate","A","AtualizarTarefa","props","exibirModal","setExibirModal","formValidado","setFormValidado","tarefa","setTarefa","carregarTarefa","setCarregarTarefa","exibirModalErro","setExibirModalErro","tarefasDb","localStorage","tarefas","JSON","parse","filter","t","id","parseInt","nome","voltar","event","preventDefault","handleFecharModal","atualizar2","currentTarget","checkValidity","map","tarefaObj","stringify","atualizar","handleTxtTarefa","target","value","handleFecharModalErro","propTypes","number","isRequired"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Button, Form, Jumbotron, Modal} from 'react-bootstrap';\r\nimport {navigate, A} from 'hookrouter';\r\n\r\n\r\nfunction AtualizarTarefa(props) {\r\n\r\n    const [exibirModal, setExibirModal] = useState(false);\r\n    const [formValidado, setFormValidado] = useState(false);\r\n    const [tarefa, setTarefa] = useState('');\r\n    const [carregarTarefa, setCarregarTarefa] = useState(true);\r\n    const [exibirModalErro, setExibirModalErro] = useState(false);\r\n\r\n\r\n    useEffect(()=>{\r\n\r\n        //p limitar uma unica vez, vamos colocar o if\r\n\r\n        if(carregarTarefa){\r\n            const tarefasDb = localStorage['tarefas'];\r\n            const tarefas = tarefasDb ? JSON.parse(tarefasDb) : [];\r\n            const tarefa = tarefas.filter(\r\n                t => t.id === parseInt(props.id)  \r\n            )[0];\r\n            setTarefa(tarefa.nome);\r\n\r\n            setCarregarTarefa(false);\r\n        }\r\n\r\n    }, [carregarTarefa, props]);\r\n\r\n\r\n\r\n    function voltar(event){\r\n        event.preventDefault();\r\n        navigate('/');\r\n    }\r\n\r\n    function handleFecharModal(){\r\n        navigate('/');\r\n    }\r\n\r\n    function atualizar2(event){\r\n        event.preventDefault();\r\n        setFormValidado(true);\r\n        if(event.currentTarget.checkValidity() === true){\r\n            //obter as tarefas\r\n            const tarefasDb = localStorage['tarefas'];\r\n            let tarefas = tarefasDb ? JSON.parse(tarefasDb) : [];\r\n            //persistir a tarefa atualziada\r\n            tarefas = tarefas.map(tarefaObj => {\r\n                if(tarefaObj.id === parseInt(props.id)){\r\n                    tarefaObj.nome = tarefa;\r\n                }\r\n                return tarefaObj;\r\n            });\r\n            localStorage['tarefas'] = JSON.stringify(tarefas);\r\n            setExibirModal(true);\r\n        }\r\n\r\n    }\r\n\r\n    function atualizar(event){\r\n        event.preventDefault();\r\n        setFormValidado(true);\r\n        if(event.currentTarget.checkValidity() === true){\r\n            //obter as tarefas\r\n            const tarefasDb = localStorage['tarefas'];\r\n            let tarefas = tarefasDb ? JSON.parse(tarefasDb) : [];\r\n            //persistir a tarefa atualziada\r\n            tarefas = tarefas.map(tarefaObj => {\r\n                if(tarefaObj.id === parseInt(props.id)){\r\n                    tarefaObj.nome = tarefa;\r\n                }\r\n                return tarefaObj;\r\n            });\r\n            localStorage['tarefas'] = JSON.stringify(tarefas);\r\n            setExibirModal(true);\r\n        }\r\n\r\n    }\r\n\r\n    function handleTxtTarefa(event){\r\n        setTarefa(event.target.value);\r\n        //o valor do txt\r\n    }\r\n\r\n    return (\r\n    \r\n        <div>\r\n            <h3 className=\"text-center\">Atualizar</h3>\r\n            <Jumbotron>\r\n                <Form onSubmit={atualizar} noValidate validated={formValidado}>\r\n                    <Form.Group>\r\n                        <Form.Label>Tarefa</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Digite a tarefa\"\r\n                            minLength=\"5\" maxLength=\"100\" required data-testid=\"txt-tarefa\" value={tarefa} onChange={handleTxtTarefa}>\r\n                        </Form.Control>\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            A tarefa deve conter ao menos 5 caracteres\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>\r\n                    <Form.Group className=\"text-center\">\r\n                        <Button variant=\"success\" type=\"submit\" data-testid=\"btn-atualizar\">\r\n                            Atualizar\r\n                        </Button>\r\n                        &nbsp;\r\n                        <A href=\"/\" className=\"btn btn-light\" onClick={voltar}>\r\n                            Voltar\r\n                        </A>\r\n                    </Form.Group>\r\n                </Form>\r\n\r\n                <Modal show={exibirModal} onHide={handleFecharModal} data-testid=\"modal\">\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Sucesso </Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        Tarefa atualizado com sucesso!\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"success\" onClick={handleFecharModal}>\r\n                            Continuar\r\n                        </Button>\r\n\r\n                    </Modal.Footer>\r\n                </Modal>\r\n\r\n                <Modal show={exibirModalErro} onHide={handleFecharModalErro} data-testid=\"modal\">\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Erro </Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        Erro ao atualizar tarefa, tente novamente em instantes.\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"warning\" onClick={handleFecharModalErro}>\r\n                            Fechar\r\n                        </Button>\r\n\r\n                    </Modal.Footer>\r\n                </Modal>\r\n\r\n\r\n            </Jumbotron>\r\n        </div>\r\n    );\r\n}\r\n\r\nAtualizarTarefa.propTypes={\r\n    id: PropTypes.number.isRequired\r\n}\r\n\r\nexport default AtualizarTarefa;"]},"metadata":{},"sourceType":"module"}